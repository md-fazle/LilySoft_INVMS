@model LilySoft_INVMS.Models.Invms.PurchaseRequestViewModel

@{
    ViewData["Title"] = "Edit Purchase Request";
}

<h1>Edit Purchase Request</h1>

<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="PurchaseRequestId" class="control-label"></label>
                        <input asp-for="PurchaseRequestId" class="form-control" readonly />
                        <span asp-validation-for="PurchaseRequestId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="RequestDate" class="control-label"></label>
                        <input asp-for="RequestDate" type="date" class="form-control" />
                        <span asp-validation-for="RequestDate" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Items</h5>
                    <button type="button" class="btn btn-success btn-sm" onclick="addNewRow()">Add Item</button>
                </div>
                <div class="card-body">
                    <div id="itemsContainer">
                        @for (int i = 0; i < Model.Details.Count; i++)
                        {
                            <div class="item-row row mb-3">
                                <div class="col-md-4">
                                    <label class="control-label">Product</label>
                                    <input asp-for="Details[i].ProductId" class="form-control" placeholder="Product ID" />
                                    <span asp-validation-for="Details[i].ProductId" class="text-danger"></span>
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Quantity</label>
                                    <input asp-for="Details[i].Quantity" type="number" class="form-control quantity" min="1" />
                                    <span asp-validation-for="Details[i].Quantity" class="text-danger"></span>
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Unit Price</label>
                                    <input asp-for="Details[i].UnitPrice" type="number" step="0.01" class="form-control unit-price" />
                                    <span asp-validation-for="Details[i].UnitPrice" class="text-danger"></span>
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Total Price</label>
                                    <input type="text" class="form-control total-price" value="@(Model.Details[i].Quantity * Model.Details[i].UnitPrice)" readonly />
                                </div>
                                <div class="col-md-2 d-flex align-items-end">
                                    <button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">Remove</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">Save</button>
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Reuse the same JavaScript functions from Create view
        function addNewRow() {
            const container = document.getElementById('itemsContainer');
            const index = container.children.length;
            const newRow = document.createElement('div');
            newRow.className = 'item-row row mb-3';
            newRow.innerHTML = `
                <div class="col-md-4">
                    <label class="control-label">Product</label>
                    <input name="Details[${index}].ProductId" class="form-control" placeholder="Product ID" />
                </div>
                <div class="col-md-2">
                    <label class="control-label">Quantity</label>
                    <input name="Details[${index}].Quantity" type="number" class="form-control quantity" min="1" value="1" />
                </div>
                <div class="col-md-2">
                    <label class="control-label">Unit Price</label>
                    <input name="Details[${index}].UnitPrice" type="number" step="0.01" class="form-control unit-price" value="0" />
                </div>
                <div class="col-md-2">
                    <label class="control-label">Total Price</label>
                    <input type="text" class="form-control total-price" readonly />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">Remove</button>
                </div>
            `;
            container.appendChild(newRow);
            attachEventListeners(newRow);
        }

        function removeRow(button) {
            const row = button.closest('.item-row');
            if (document.querySelectorAll('.item-row').length > 1) {
                row.remove();
                reindexRows();
            } else {
                alert('At least one item is required.');
            }
        }

        function reindexRows() {
            const rows = document.querySelectorAll('.item-row');
            rows.forEach((row, index) => {
                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    if (name) {
                        input.setAttribute('name', name.replace(/\[\d+\]/, `[${index}]`));
                    }
                });
            });
        }

        function calculateTotal(row) {
            const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
            const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
            const total = quantity * unitPrice;
            row.querySelector('.total-price').value = total.toFixed(2);
        }

        function attachEventListeners(row) {
            row.querySelector('.quantity').addEventListener('input', () => calculateTotal(row));
            row.querySelector('.unit-price').addEventListener('input', () => calculateTotal(row));
            calculateTotal(row);
        }

        document.querySelectorAll('.item-row').forEach(row => {
            attachEventListeners(row);
        });
    </script>
}